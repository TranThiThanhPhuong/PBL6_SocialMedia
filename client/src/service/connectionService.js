// src/service/connectionService.js
import api from "../api/axios";
import toast from "react-hot-toast";
import { fetchConnections } from "../features/connections/connectionsSlice";
import { fetchUser } from "../features/user/userSlice";

// === FOLLOW ===
export const handleFollow = async (userId, getToken, dispatch) => {
  try {
    const token = await getToken();
    const { data } = await api.post(
      "/api/user/follow",
      { id: userId },
      { headers: { Authorization: `Bearer ${token}` } }
    );

    if (data.success) {
      toast.success(data.message || "ƒê√£ theo d√µi");
      dispatch(fetchUser(token));
    } else {
      toast.error(data.message);
    }
  } catch (error) {
    toast.error(error.message);
  }
};

export const handleUnfollow = async (userId, getToken, dispatch) => {
  try {
    const token = await getToken();
    const { data } = await api.post(
      "/api/user/unfollow",
      { id: userId },
      { headers: { Authorization: `Bearer ${token}` } }
    );

    if (data.success) {
      toast.success(data.message || "ƒê√£ b·ªè theo d√µi");
      dispatch(fetchConnections(token));
    } else {
      toast.error(data.message);
    }
  } catch (error) {
    toast.error(error.message);
  }
};

// === K·∫æT B·∫†N ===
export const handleConnectionRequest = async (
  userId,
  getToken,
  dispatch,
  currentUser,
  navigate
) => {
  try {
    if (currentUser?.connections?.includes(userId)) {
      return navigate(`/messages/${userId}`);
    }

    const token = await getToken();
    const { data } = await api.post(
      "/api/user/connect",
      { id: userId },
      { headers: { Authorization: `Bearer ${token}` } }
    );

    if (data.success) {
      toast.success("ƒê√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n üíå");
      dispatch(fetchConnections(token));
    } else {
      toast.error(data.message || "Kh√¥ng th·ªÉ g·ª≠i l·ªùi m·ªùi.");
    }
  } catch (error) {
    toast.error(error.response?.data?.message || error.message);
  }
};

// === CH·∫§P NH·∫¨N / T·ª™ CH·ªêI / H·ª¶Y K·∫æT B·∫†N ===
export const handleAcceptConnection = async (userId, getToken, dispatch) => {
  try {
    const token = await getToken();
    const { data } = await api.post(
      "/api/user/accept",
      { id: userId },
      { headers: { Authorization: `Bearer ${token}` } }
    );
    if (data.success) {
      toast.success(data.message || "ƒê√£ ch·∫•p nh·∫≠n k·∫øt b·∫°n");
      dispatch(fetchConnections(token));
    } else {
      toast.error(data.message);
    }
  } catch (error) {
    toast.error(error.message);
  }
};

export const handleRejectConnection = async (userId, getToken, dispatch) => {
  try {
    const token = await getToken();
    const { data } = await api.post(
      "/api/user/reject",
      { id: userId },
      { headers: { Authorization: `Bearer ${token}` } }
    );
    if (data.success) {
      toast.success(data.message || "ƒê√£ t·ª´ ch·ªëi l·ªùi m·ªùi");
      dispatch(fetchConnections(token));
    } else {
      toast.error(data.message);
    }
  } catch (error) {
    toast.error(error.message);
  }
};

export const handleRemoveConnection = async (userId, getToken, dispatch) => {
  try {
    const token = await getToken();
    const { data } = await api.post(
      "/api/user/remove-friend",
      { id: userId },
      { headers: { Authorization: `Bearer ${token}` } }
    );
    if (data.success) {
      toast.success(data.message || "ƒê√£ h·ªßy k·∫øt b·∫°n");
      dispatch(fetchConnections(token));
    } else {
      toast.error(data.message);
    }
  } catch (error) {
    toast.error(error.message);
  }
};

// === CH·∫∂N ===
export const handleBlock = async (userId, getToken, dispatch) => {
  try {
    const token = await getToken();
    const { data } = await api.post(
      "/api/user/block",
      { id: userId },
      { headers: { Authorization: `Bearer ${token}` } }
    );
    if (data.success) {
      toast.success(data.message || "ƒê√£ ch·∫∑n ng∆∞·ªùi d√πng.");
      dispatch(fetchConnections(token));
    } else {
      toast.error(data.message || "Kh√¥ng th·ªÉ ch·∫∑n ng∆∞·ªùi d√πng.");
    }
  } catch (error) {
    toast.error(error.response?.data?.message || error.message);
  }
};

export const handleUnblock = async (userId, getToken, dispatch) => {
  try {
    const token = await getToken();
    const { data } = await api.post(
      "/api/user/unblock",
      { id: userId },
      { headers: { Authorization: `Bearer ${token}` } }
    );

    if (data.success) {
      toast.success(data.message || "ƒê√£ b·ªè ch·∫∑n ng∆∞·ªùi d√πng.");
      dispatch(fetchConnections(token)); // c·∫≠p nh·∫≠t l·∫°i danh s√°ch
    } else {
      toast.error(data.message || "Kh√¥ng th·ªÉ b·ªè ch·∫∑n ng∆∞·ªùi d√πng.");
    }
  } catch (error) {
    toast.error(error.response?.data?.message || error.message);
  }
};