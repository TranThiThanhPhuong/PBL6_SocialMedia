import React, { useRef, useEffect } from "react";
import { Routes, Route, useLocation } from "react-router-dom";
import { useUser, useAuth } from "@clerk/clerk-react";
import { useDispatch } from "react-redux";
import toast, { Toaster } from "react-hot-toast";

import Login from "./pages/Login";
import Feed from "./pages/Feed";
import Messages from "./pages/Messages";
import Connections from "./pages/Connections";
import Discover from "./pages/Discover";
import CreatePost from "./pages/CreatePost";
import Profile from "./pages/Profile";
import Layout from "./pages/Layout";
import Notifications from "./pages/Notifications";

import { fetchUser } from "./features/user/userSlice";
import { fetchConnections } from "./features/connections/connectionsSlice";
import { addMessage } from "./features/messages/messagesSlice";
import socket from "./app/socket";

const App = () => {
  const { user } = useUser(); // S·ª≠ d·ª•ng useUser ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
  const { getToken } = useAuth(); // S·ª≠ d·ª•ng useAuth ƒë·ªÉ l·∫•y h√†m getToken ƒë·ªÉ l·∫•y token JWT x√°c th·ª±c c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
  const { pathname } = useLocation(); // N√≥ cho b·∫°n bi·∫øt URL hi·ªán t·∫°i c·ªßa app (v√≠ d·ª•: /messages/123, /profile, ‚Ä¶), pathname l√† chu·ªói ch·ª©a ƒë∆∞·ªùng d·∫´n ƒë√≥.
  const pathnameRef = useRef(pathname); // useRef t·∫°o ra m·ªôt ‚Äúh·ªôp‚Äù l∆∞u gi√° tr·ªã m√† kh√¥ng l√†m component re-render khi thay ƒë·ªïi.
  const dispatch = useDispatch(); // S·ª≠ d·ª•ng useDispatch ƒë·ªÉ l·∫•y h√†m dispatch t·ª´ Redux store

  useEffect(() => {
    // H√†m ƒë·ªÉ thi·∫øt l·∫≠p token v√†o header c·ªßa t·∫•t c·∫£ c√°c y√™u c·∫ßu fetch
    const fetchData = async () => {
      if (user) {
        const token = await getToken(); // L·∫•y token JWT c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
        dispatch(fetchUser(token)); // G·ªçi action fetchUser v·ªõi token ƒë·ªÉ l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ server
        dispatch(fetchConnections(token)); //
      }
    };
    fetchData(); // G·ªçi h√†m fetchData ƒë·ªÉ th·ª±c hi·ªán vi·ªác l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng khi component ƒë∆∞·ª£c render ho·∫∑c khi user thay ƒë·ªïi
  }, [user, getToken, dispatch]); // Ch·∫°y useEffect m·ªói khi user ho·∫∑c getToken thay ƒë·ªïi

  useEffect(() => {
    pathnameRef.current = pathname; // M·ªói l·∫ßn URL ƒë·ªïi (/messages, /profile, /discover...), th√¨ pathnameRef.current ƒë∆∞·ª£c c·∫≠p nh·∫≠t theo.
  }, [pathname]);

  // useEffect(()=>{
  //   if(user){
  //     const eventSource = new EventSource(import.meta.env.VITE_BASEURL + '/api/message/' + user.id);

  //     eventSource.onmessage = (event)=> {
  //       const message = JSON.parse(event.data);

  //       if(pathnameRef.current === ('/message/' + message.from_user_id._id)){
  //         dispatch(addMessage(message));
  //       // N·∫øu b·∫°n ƒëang ·ªü ƒë√∫ng chat box c·ªßa ng∆∞·ªùi g·ª≠i tin nh·∫Øn (/message/:id) ‚Üí th√¨ th√™m tin nh·∫Øn v√†o Redux (hi·ªán ngay trong UI).
  //       }
  //       else {
  //         toast.custom((t)=>(
  //           <Notifications t={t} message={message}/>
  //         ), {position: "bottom-right"});
  //       // N·∫øu b·∫°n ƒëang ·ªü ch·ªó kh√°c ‚Üí th√¨ show th√¥ng b√°o (toast).
  //       }
  //     }
  //     return ()=> {
  //       eventSource.close();
  //     }
  //   }
  // }, [user, dispatch]);

   // K·∫øt n·ªëi socket.io
  useEffect(() => {
    if (user) {
      socket.connect();
      socket.emit("register_user", user.id);

      socket.on("receive_message", (message) => {
        const currentPath = pathnameRef.current;
        if (currentPath === `/messages/${message.from_user_id}`) {
          dispatch(addMessage(message));
        } else {
          toast.custom(
            (t) => (
              <div className="bg-white shadow-md rounded-lg p-3 flex gap-3 items-center">
                <img
                  src={message.from_user_id?.profile_picture}
                  alt=""
                  className="w-10 h-10 rounded-full"
                />
                <div>
                  <p className="font-semibold text-gray-800">
                    {message.from_user_id?.full_name}
                  </p>
                  <p className="text-gray-600 text-sm">v·ª´a nh·∫Øn tin cho b·∫°n üí¨</p>
                </div>
              </div>
            ),
            { position: "bottom-right" }
          );
        }
      });

      return () => {
        socket.off("receive_message");
        socket.disconnect();
      };
    }
  }, [user]);

  return (
    <>
      {/* Route: dieu huong trang web  */}
      {/* xd url hien thi component nao, N√≥ gi√∫p ·ª©ng d·ª•ng chuy·ªÉn trang m√† kh√¥ng c·∫ßn reload l·∫°i to√†n b·ªô website. */}
      <Toaster /> {/* Toaster: hien thi cac thong bao */}
      <Routes>
        <Route path="/" element={!user ? <Login /> : <Layout />}>
          <Route index element={<Feed />} />
          <Route path="messages/*" element={<Messages />} />
          {/* <Route path="messages" element={<Messages />} /> */}
          {/* <Route path="messages/:userId" element={<ChatBox />} /> */}
          <Route path="connections" element={<Connections />} />
          <Route path="discover" element={<Discover />} />
          <Route path="profile" element={<Profile />} />
          <Route path="profile/:profileId" element={<Profile />} />
          <Route path="notifications" element={<Notifications />} />
          <Route path="create-post" element={<CreatePost />} />
        </Route>
      </Routes>
    </>
  );
};

export default App;

// App.jsx c≈©ng s·ª≠ d·ª•ng useUser t·ª´ Clerk ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p c·ªßa ng∆∞·ªùi d√πng.
// N√≥ l√† n∆°i k·∫øt n·ªëi gi·ªØa c√°c trang v√† c√°c th√†nh ph·∫ßn kh√°c trong ·ª©ng d·ª•ng, gi√∫p qu·∫£n l√Ω ƒëi·ªÅu h∆∞·ªõng v√† tr·∫°ng th√°i ng∆∞·ªùi d√πng.
